debug: true
server:
  port: 8080
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    # tomcat最大线程数，默认为200
    max-threads: 800
    # Tomcat启动初始化的线程数，默认值25
    min-spare-threads: 30
  servlet:
    encoding:
      charset: utf-8
      enabled: true
      force: true

spring:
  profiles:
    active: '@profiles.active@'
  mvc:
    servlet:
      load-on-startup: 100
  # 静态资源
  resource:
    static-locations: classpath:/static/,classpath:/html/
  # 资源信息
  messages:
    # 国际化资源文件路径
    basename: i18n/messages
  session:
    store-type: jdbc
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  # 文件上传
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
  # 服务模块
  devtools:
    restart:
      # 热部署开关
      enabled: true
      additional-paths: src/main/java
      exclude: html/**,static/**,templates/**,mapper/**,mybatis/**,config/**
  # activiti模型检测
  activiti:
    check-process-definitions: false

  datasource:
    # 连接池
    druid:
      # 配置初始化大小、最小、最大
      initial-size: 5
      max-active: 200
      min-idle: 5
      # 连接超时时间
      max-wait: 6000
      # 间隔多久进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 一个连接在连接池中最小的生存时间，单位是毫秒
      min-evictable-idle-time-millis: 120000
      # 用来检测连接是否有效的sql，要求是一个查询语句。 如果validationQuery为null，testOnBorrow、testOnReturn、 testWhileIdle都不会其作用。
      validation-query: SELECT 1
      # 当从连接池借用连接时，是否测试该连接
      test-on-borrow: false
      # 在连接归还到连接池时是否测试该连接
      test-on-return: false
      # 当连接空闲时，是否执行连接测试
      test-while-idle: true
      # 是否缓存preparedStatement，也就是PSCache。 PSCache对支持游标的数据库性能提升巨大，比如说oracle。 在mysql5.5以下的版本中没有PSCache功能，建议关闭掉
      pool-prepared-statements: true
      # 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: 100
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filter:
        # 慢SQL记录(sql语句执行时间超过某个界限就记录下来)
        stat:
          log-slow-sql: true
          slow-sql-millis: 2000
      #        wall:
      #          config:
      #            none-base-statement-allow: true
      #            multi-statement-allow: true
      # 本来有防火墙的过滤器的，但批量更新总是过不去，就去掉了，加防火墙怎么实现批量更新？还没解决
      filters: stat
      #  监控配置
      # WebStatFilter配置
      web-stat-filter:
        # 是否开启web-jdbc监控 默认是false
        enabled: true
        # 是否开启单个监控url调用的sql列表 默认开启
        profile-enable: true
        url-pattern: /*
        exclusions: /druid/*,*.gif,*.png,*.jpg,*.html,*.js,*.css,*.ico
        # 是否开启session统计 默认false
        session-stat-enable: true
        # 设置session统计的最大值 默认是1000
        session-stat-max-count: 1000
      # StatViewServlet配置
      stat-view-servlet:
        # 是否开启druid的数据统计界面 默认false
        enabled: true
        url-pattern: /druid/*
        #  登录监控界面的用户名以及密码，登录url为 IP:port/druid
        login-username: druid
        login-password: 123
        allow:
        deny:
        #  HTML页面上的“Reset All”功能
        reset-enable: true

# Ehcache配置
cache:
  type: ehcache
  ehcache:
    config: classpath:ehcache.xml

#配置监控统计拦截的filters，去掉后监控界面sql将无法统计,'wall'用于防火墙
filters: stat, wall, log4j

# mybatis配置
mybatis:
  configuration:
    cache-enabled: true
    use-generated-keys: true
    default-executor-type: REUSE
  type-aliases-package: com.fit.entity
  mapper-locations: classpath:mybatis/**/*.xml

# 是否远程备份数据库
remoteDB: no
DBSeverport: 6666
# 数据库类型
dbType: mysql
dbPort: 3306
dbUser: root
dbPass: root
dbAddr: 127.0.0.1
dbName: fhadmin
dbPath: /data/mysql
sqlFilePath: /mnt/sql

